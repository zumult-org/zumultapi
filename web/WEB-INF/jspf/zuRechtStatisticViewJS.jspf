<%-- 
    Document   : zuRechtStatisticViewJS
    Created on : 05.05.2021, 11:42:38
    Author     : Elena Frick
    Description: These file contains java script code used in zuRechtMetadataStatisticView.jsp and zuRechtHitStatisticView.jsp
--%>

<%@ page pageEncoding="UTF-8" %>             

<script type="text/javascript">
    var openKWICText ='<%=myResources.getString("OpenKWIC")%>';
    var sortedByLabel='<%=myResources.getString("SortedBy")%>'+ " ("+'<%=myResources.getString("SelectOne")%>'+"):";

    var ajaxSearchRequest = null;
    var query = '<%= query.replace("\\", "\\\\") %>';
    var corpusQueryStr = '<%= corpusQuery %>';          
    var mode = '<%=mode %>';
    var wordLists = "<%=wordLists.replace("\\", "\\\\") %>"; // please use here double quotes because values can contain single quotes
    var count = 100;
    var offset = 0;
    var sortType = '<%= SortTypeEnum.ABS_DESC.name() %>';
    
    var notAvailable = "not available";

    $(document).ready(function(){    
        $("body").append("<div id='statistic-result-area' class='mx-3 mt-3'></div>");
        addMetadataSelection();
        getMetadataTable('<%= metadataKeyID %>', '<%= metadataKeyName %>');
    });
    
    function showMoreQuery(obj){
        var div = $(obj).parent();
        div.empty();
        div.html('<%=longQuery %>');
        div.append(" <span class='link' onclick='showLessQuery(this)'>(<%=myResources.getString("ShowLess")%>)</span>");
    }

    function showLessQuery(obj){
        var div = $(obj).parent();
        div.empty();
        div.html('<%=shortQuery %>');
        div.append(" <span class='link' onclick='showMoreQuery(this)'>(<%=myResources.getString("ShowMore")%>)</span>");
    }
    
    function formatValue(value){
        const myArr1 = value.split("|");             
        if(myArr1.length>1){
            const myArr2 = myArr1.map(formatValue2);
            return myArr2.join(" ");
        }else{
            return formatValue2(value);
        }
    }
    
    function formatValue2(value) {
        const myArr = value.split("=>");
        if (myArr.length > 1 ){
            if(myArr[0]==='<%= Constants.METADATA_KEY_MATCH_TYPE_PAUSE_DURATION %>'){
                var str = "(" + myArr[1] + ")";
                return str;
            }
            
            if(myArr[0]==='<%= Constants.METADATA_KEY_MATCH_TYPE_PAUSE_TYPE %>'){
                switch (myArr[1]) 
                {
                    case 'micro': return "(.)";
                    case 'short': return "(..)";
                    case 'medium': return "(...)";                    
                    case 'long': return "(....)";
                    default: return myArr[1];
                } 
            }
            
            if(myArr[0]==='<%= Constants.ELEMENT_NAME_VOCAL %>'){
                switch (myArr[1]) 
                {
                    case 'short breathe out': return "h°";
                    case 'medium breathe out': return "hh°";
                    case 'long breathe out': return "hhh°";                    
                    case 'short breathe in': return "°h";
                    case 'medium breathe in': return "°hh";
                    case 'long breathe in': return "°hhh";

                    default: return myArr[1];
                }    
            }
            
            if(myArr[0]==='<%= Constants.ELEMENT_NAME_INCIDENT %>'){
                var str = "((" + myArr[1] + "))";
                return str;
            }
            return myArr[1];
        }else{
            return value;
        }
    }


    function getMetadataTable(metadataKeyID, metadataKeyName){

    if(ajaxSearchRequest){
        ajaxSearchRequest.abort();
        ajaxSearchRequest = null;
    }
    
    ajaxSearchRequest = $.ajax({
        //example for GET: http://localhost:8084/DGDRESTTest/jsp/zuRechtMetadataStatisticView.jsp?q=<af/>&cq=corpusSigle=%22FOLK%22&metadataKeyID=t_dgd_kennung
        type: "POST",
        url: statisticURL,
        data: { q: query, cq :corpusQueryStr, count : count, offset: offset, metadataKeyID : metadataKeyID, mode: mode, sort: sortType, customWordLists: wordLists },
        dataType: "text",

        success: function(xmlText, status) {
            //alert(xmlText);
            $("#wait-page").css("display", "none");
            
            var data = new FormData();
            data.append('openKWICParam', openKWICText);
            data.append('totalParam', '<%=myResources.getString("Total")%>');
            data.append('hitsParam', '<%=myResources.getString("Hits")%>');

            var fragment = transform(xmlText, "zuRechtStatisticTable2Html.xsl", data);                    
            $('#statistic-result-area').html(fragment);

            // replace the key id with the name
            $('.metadata-table').find('th.metadataValues').text(metadataKeyName);

             // replace '|' in multi-token metadata values
            $('#metadata-table tr.metadata-table-row').each(function (rowIndex, row){                 
                var value = $(this).find('td.metadataValues').text();
                var newValue = diplayUnicodeCharacter(value);
                newValue = formatValue(newValue);
                $(this).find('td.metadataValues').text(newValue);
                
                //var newValue = diplayUnicodeCharacter(value.replace(/\|/g, " "));
                //$(this).find('td.metadataValues').text(newValue);
            });

            var dataType = false;
            if (metadataKeyID===tokenSizeKeyID){
                dataType = true;
            }      

           // var distinctItems  = getDistinctValues(xmlText);
            var xmlDocument = $.parseXML(xmlText);
            var $xmlObject = $(xmlDocument); 
            var distinctItems=parseInt($xmlObject.find('distinctValues').text());

            if (distinctItems > offset + count){
                $("body").append("<button id='btn-showMore' class='btn btn-success ml-3 mb-3'><%=myResources.getString("ShowMore")%></button>");
                $("#btn-showMore").on('click', function(){
                    $(this).prepend("<i id='wait-icon' class='fa fa-spinner fa-spin mr-3'></i>");
                    $(this).prop('disabled', true);
                    var newOffset = $('.metadata-table-body tr.metadata-table-row:last').index() + 1;

                    ajaxSearchRequest = $.ajax({

                        type: "POST",
                        url: statisticURL,
                        data: { q: query, cq :corpusQueryStr, count : count, offset: newOffset, metadataKeyID : metadataKeyID, mode: mode, sort: sortType, customWordLists: wordLists },
                        dataType: "xml",

                        success: function(xml, status) {
                            //alert(status);
                            //alert(xml);
                            $(xml).find('items').children().each(function() {
                                var metadataValue = this.getAttribute("metadataValue");
                                var newMetadataValue = diplayUnicodeCharacter(metadataValue);        
                                newMetadataValue = formatValue(newMetadataValue);
                      
                                var numberOfHits = this.getAttribute("numberOfHits");
                                newOffset = newOffset + 1;
                                /*$('.metadata-table-body').append("<tr class='metadata-table-row'><td class='numbering'>"+ newOffset + "</td>\n\
                                                    <td class='metadataValues' data-value='" + metadataValue + "' style='color: black; font-weight: bold; text-align: left;'>" + metadataValue.replace(/\|/g, " ") + "</td>\n\
                                                    <td class='numberOfHits' style='text-align: center;'>" + numberOfHits + "</td>\n\
                                                    <td class='kwic-link'><button type='button' class='btn btn-link my-0 py-0 btn-sm btn-open-kwic' onclick='openKWIC(this)'>open KWIC</button></td></tr>");
                                 */

                                var tr = $('<tr/>',{
                                    "class" : "metadata-table-row"
                                });

                                $("<td class='numbering'>"+ newOffset + "</td>").appendTo(tr);
                                //$("<td class='metadataValues' style='color: black; font-weight: bold; text-align: left;'>"+ metadataValue.replace(/\|/g, " ") + "</td>").attr('data-value', metadataValue).appendTo(tr);
                                
                                $("<td class='metadataValues' style='color: black; font-weight: bold; text-align: left;'>"+ newMetadataValue + "</td>").attr('data-value', metadataValue).appendTo(tr);
                                $("<td class='numberOfHits' style='text-align: center;'>" + numberOfHits + "</td>").appendTo(tr);
                                $("<td class='kwic-link'><button type='button' class='btn btn-link my-0 py-0 btn-sm btn-open-kwic' onclick='openKWIC(this)'><%=myResources.getString("OpenKWIC")%></button></td>").appendTo(tr);

                                $('.metadata-table-body').append(tr);

                            });

                            $( "#wait-icon" ).remove();             

                            if (distinctItems <= newOffset){
                                $('#btn-showMore').hide();

                                addSorting(metadataKeyName, dataType);
                            }else{
                                $("#btn-showMore").prop('disabled', false);
                            }
                        },
                        error: function(xhr, status, error){
                            if (status === "abort"){
                                //ignore
                            }else {
                                var errorMessage = xhr.status + ': ' + xhr.statusText + ": " + xhr.responseText;
                                alert('Error: ' + errorMessage); 
                            }           
                        }
                    });

                });
            }else {
                addSorting(metadataKeyName, dataType);
            }
        },
        error: function(xhr, status, error){
            if (status === "abort"){
                //ignore
            }else {
                var errorMessage = xhr.status + ': ' + xhr.statusText + ": " + xhr.responseText;
                alert('Error: ' + errorMessage); 
            }          
        }
    });    
}
            
            
    function addMetadataSelection(){
        $('#sel-metadata').on('change', function() {
        $("#wait-page").css("display", "block");
        $('#statistic-result-area').empty();
        $('#btn-showMore').remove();
        var selectedValue = $(this).find(':selected').val();
        var selectedName = $(this).find(':selected').text();
        getMetadataTable(selectedValue, selectedName);          
        });
    }
    
    function addSorting(metadataKeyName, dataType){               
        var test = $('.metadata-table-body tr.metadata-table-row:last').index();
        if(test > 1){
            $('#statistic-result-area').prepend("<label class='mb-3' for='sel-sort'>"+sortedByLabel+"</label>\n\
            <select class='mb-3' id='sel-sort' name='sel-sort'>\n\
            <option value='2' data-desc='true' data-number='true' selected >"+'<%=myResources.getString("Hits")%>' + " (abs.) "+ '<%=myResources.getString("Descending")%>'+"</option>\n\
            <option value='2' data-desc='false' data-number='true'>"+'<%=myResources.getString("Hits")%>'+" (abs.) "+'<%=myResources.getString("Ascending")%>'+"</option>\n\
            <option value='1' data-desc='true' data-number='"+ dataType +"'>" + metadataKeyName + " " + '<%=myResources.getString("Descending")%>' + "</option>\n\
            <option value='1' data-desc='false' data-number='"+ dataType +"'>" + metadataKeyName + " "+'<%=myResources.getString("Ascending")%>'+"</option></select>");

            $('#sel-sort').on('change', function() {
                var tableID = "metadata-table";
                var columnNumber = $(this).find(':selected').val();
                var sort = $(this).find(':selected').data('desc');
                var sortNumber = $(this).find(':selected').data('number');
                sortTable(tableID, columnNumber, sortNumber, sort);
                $('.metadata-table-body tr.metadata-table-row').each(function(index){
                    $(this).children(":eq(0)").html(index + 1);
                });
            }); 
        }
    }
    
    function openKWIC(obj){
    var pageLength = 10;
    var pageIndex = 0;
    var context = "3-t,3-t";
    var metadataKeyID = $('#sel-metadata').val();
    var numberOfHits = $(obj).parent().parent().find('td.numberOfHits').text();               
    getKWIC(obj, pageLength, pageIndex, context, metadataKeyID, numberOfHits);
}
            
    function closeKWIC(obj){
        var cell = $(obj).parent();
        cell.empty();
        cell.append("<button type='button' class='btn btn-link my-0 py-0 btn-sm btn-open-kwic' onclick='openKWIC(this)'>"+openKWICText+"</button>");
        cell.height("auto");
    }

    function openTranscript(obj){
        $(obj).closest('form').submit();    
    }

    function displayKWICtable(cell, xml){
    //  cell.find(".openXML-KWICSearch-area").css("display", "block");
    //  cell.find(".rowData-KWICSearch").text(xml);


        var fragment = transform(xml, "zuRechtKwic2Html.xsl", null);
        cell.find(".myKWIC").html(fragment);
        cell.find(".signal button").css("display", "none");

        cell.find(".kwic-tab").css("display", "block");
        cell.find(".kwic-tab .kwic-card").css("display", "none");

        //cell.find(".KWICSearch-result").css("display", "block");
    }

    function getHitsTotal(xml){
        var xmlDocument = $.parseXML(xml);
        var $xmlObject = $(xmlDocument);
        var totalHits = $xmlObject.find('total').text();
        return totalHits;
    }
    
    function displayKWIC(cell, xml){
        var xmlDocument = $.parseXML(xml);
        var $xmlObject = $(xmlDocument);
        
        var queryStr=$xmlObject.find('query').html();          
        var decodedQueryStr = decodeHTMLQuery(queryStr);
        
        var corpusQueryStr=$xmlObject.find('corpusQuery').text(); 
        var decodedCorpusQueryStr = decodeHTMLQuery(corpusQueryStr);

        var metadataQueryStr=$xmlObject.find('metadataQuery').text();
        var decodedMetadataQueryStr = null;
        if(metadataQueryStr !==""){
            decodedMetadataQueryStr = decodeHTMLQuery(metadataQueryStr);
        }

        var totalHits = $xmlObject.find('total').text();
        var totalHitsNumber = parseInt(totalHits);
        var searchType = $xmlObject.find('code').text();    
        var itemsPerPage = $xmlObject.find('itemsPerPage').text();
        
                    //display summary   
                   /*  cell.find(".KWICSearch-result").append("<div class='clearfix'>\n\
                            <div class='float-left'>CQP Query: <i>" + queryStr + "</i></div>\n\
                            <div class='float-right'><a class='btn btn-outline-secondary btn-sm py-0' target='_blank' \n\
                            href='../jsp/zuRechtMetadataStatisticView.jsp?q=" + encodeQueryToURL(queryStr) + "&cq=" + corpusQueryStr + "&mode=" + searchType + "&metadataKeyID=<%= Constants.METADATA_KEY_TRANSCRIPT_DGD_ID %>" + "'>Open Metadata View</a></div></div>");
                    */

        // add close button
        cell.find(".wait-query-tab").before("<input type='button' class='btn py-0 float-right' onclick='closeKWIC(this)' value='&times;' title='Close'>");


        if (totalHitsNumber > itemsPerPage){
            // add pagination                   
            addPagination(cell, totalHits, itemsPerPage, decodedQueryStr, decodedCorpusQueryStr, decodedMetadataQueryStr, searchType);
        }

        // add results
        displayKWICtable(cell, xml);
    }

    function addPagination(cell, totalHits, itemsPerPage, queryString, corpusQueryStr, metadataQueryStr, searchType){
        var paging = $("<ul></ul>").addClass("pagination-sm justify-content-center kwic-pagination mt-3");
        cell.find(".myKWIC").before(paging);

        var totalPages_pre = (totalHits/itemsPerPage);
        var totalPages = (totalHits % itemsPerPage) === 0 ? totalPages_pre : totalPages_pre + 1;

        cell.find(".kwic-pagination").twbsPagination({
            totalPages: totalPages,
            visiblePages: 5,
            initiateStartPageClick: false,
            first: firstButtonLabel,
            prev: prevButtonLabel,
            next: nextButtonLabel,
            last: lastButtonLabel,
            onPageClick: function (event, page) {

                var height  = cell.height();
                cell.height(height);

                //hide summary of the query and delete previous page
                //cell.find(".KWICSearch-result").css("display", "none");
                //cell.find(".openXML-KWICSearch-area").css("display", "none");
                cell.find(".kwic-tab").css("display", "none");
                //cell.find(".rowData-KWICSearch").empty();
                cell.find(".myKWIC").empty();


                // start loding indicator for ajax requests
                cell.find(".wait-query-tab").css("display", "block");

                var pageIndex = ((page-1)*itemsPerPage);

                // send request
                ajaxSearchRequest = $.ajax({

                    type: "POST",
                    url: kwicURL,
                    data: { q: queryString, cq : corpusQueryStr, meta: metadataQueryStr, count : itemsPerPage, offset : pageIndex, mode : searchType, customWordLists: wordLists },
                    dataType: "text",

                    success: function(xml, status) {

                        cell.find(".wait-query-tab").css("display", "none");
                        displayKWICtable(cell, xml);                                    
                    },
                    error: function(xhr, status, error){
                        cell.find(".wait-query-tab").css("display", "none");

                        // if abort no alert
                        if (status === "abort"){
                            //ignore
                        }else {
                            var errorMessage = xhr.status + ': ' + xhr.statusText + ": " + xhr.responseText;
                            alert('Error: ' + errorMessage);
                        }

                    }
                });
            }
        });            
    }

    function searchByCorpusQuery(cell, q, cq, meta, pLength, pIndex, m, c, nOfHits){
        //alert("query: "  + q + " meta: " + meta);
 
        $.ajax({
            type: "POST",
            url: kwicURL,
            data: { q: q, cq : cq, meta: meta, count : pLength, offset : pIndex, mode : m, context : c, customWordLists: wordLists},
            dataType: "text",

            success: function(xml, status) {
                //alert(xml);
                cell.find(".wait-query-tab").css("display", "none");
                if(getHitsTotal(xml)===nOfHits){  
                    displayKWIC(cell, xml);  
                }else{
                    cell.html("<span style='color:red'>KWIC is not possible</span>");
                }
            },
            error: function(xhr, status, error){
                cell.find(".wait-query-tab").css("display", "none");
                cell.html("<span style='color:red'>KWIC is not possible</span>");
                var errorMessage = xhr.status + ': ' + xhr.statusText + ": " + xhr.responseText;
                alert('Error: ' + errorMessage);            
            }
        });
    }

    function startAjaxForSearchByMetadata(pageLength, pageIndex, context, numberOfHits, meta, newQuery, cell){
        cell.load("zuRechtKWICResultView.html", function() {
            cell.find(".wait-query-tab").html(searchLoadingIndicatorText);
            cell.find(".wait-query-tab").css("display", "block");
            
  
            
            $.ajax({
                type: "POST",
                url: kwicURL,
                data: { q: newQuery, cq :corpusQueryStr, count : pageLength, offset : pageIndex, mode : mode, context : context, customWordLists: wordLists },
                dataType: "text",

                success: function(xml, status) {
                    //alert(xml);
                    cell.find(".wait-query-tab").css("display", "none");
                        if(getHitsTotal(xml)===numberOfHits){  
                            displayKWIC(cell, xml);  
                        }else{
                            cell.find(".wait-query-tab").css("display", "block"); 
                            searchByCorpusQuery(cell, query, corpusQueryStr, meta, pageLength, pageIndex, mode, context, numberOfHits);
                        }
                },
                error: function(xhr, status, error){
                    searchByCorpusQuery(cell, query, corpusQueryStr, meta, pageLength, pageIndex, mode, context, numberOfHits);           
                }
            });
        });
    }

    function startAjaxForSearchByTokenAnnotations(pageLength, pageIndex, context, numberOfHits, meta, newQuery, cell, metadataKeyID, newMetadataKeyValue){

        cell.load("zuRechtKWICResultView.html", function() {
            cell.find(".wait-query-tab").html(searchLoadingIndicatorText);
            cell.find(".wait-query-tab").css("display", "block");
            //alert("query: "  + newQuery + " meta: " + meta);
   
            $.ajax({
                type: "POST",
                url: kwicURL,
                data: { q: newQuery, cq : corpusQueryStr, meta: meta, count : pageLength, offset : pageIndex, mode : mode, context : context, customWordLists: wordLists },
                dataType: "text",

                success: function(xml, status) {
                    //alert(xml);
                    cell.find(".wait-query-tab").css("display", "none");
                    if(getHitsTotal(xml)===numberOfHits){  
                        displayKWIC(cell, xml);  
                    }else{
                        //cell.html("<span style='color:red'>KWIC is not possible</span>");
                        cell.find(".wait-query-tab").css("display", "block"); 
                        searchByCorpusQuery(cell, query, corpusQueryStr, metadataKeyID + "=" + newMetadataKeyValue, pageLength, pageIndex, mode, context, numberOfHits);
                    }
                },
                error: function(xhr, status, error){
                    searchByCorpusQuery(cell, query, corpusQueryStr, metadataKeyID + "=" + newMetadataKeyValue, pageLength, pageIndex, mode, context, numberOfHits)           
                }

            });
        });   
    }

    function getNewQueryForSearchByMetadata(metadataKeyID, metadataKeyValue){
        var newQuery = "(" + query + ")";
        if(metadataKeyValue===notAvailable){
            newQuery = newQuery + " !within <" + metadataKeyID + "/>";
        } else if (metadataKeyValue.indexOf("(") > 0  || metadataKeyValue.indexOf(")") > 0){
            newQuery = newQuery + " within <" + metadataKeyID + "=\""+ escapeParentheses(metadataKeyValue) + "\"/>";  
        }else{
            newQuery = newQuery + " within <" + metadataKeyID + "=\""+ metadataKeyValue + "\"/>";
        }
        return newQuery;
    }


</script>
