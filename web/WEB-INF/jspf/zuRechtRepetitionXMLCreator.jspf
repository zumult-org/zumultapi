<%@page import="org.zumult.query.searchEngine.Repetition.SimilarityTypeEnum"%>
<%@page import="org.zumult.query.searchEngine.Repetition.RepetitionTypeEnum"%>
<%@page import="org.zumult.io.Constants"%>
<%@ page pageEncoding="UTF-8" %>             

<script type="text/javascript">    

    var XML_ELEMENT_NAME_REPETITIONS='<%=Constants.REPETITION_XML_ELEMENT_NAME_REPETITIONS %>';
    var XML_ELEMENT_NAME_REPETITION='<%=Constants.REPETITION_XML_ELEMENT_NAME_REPETITION %>';
    var XML_ELEMENT_NAME_SPEAKER='<%=Constants.REPETITION_XML_ELEMENT_NAME_SPEAKER %>';
    var XML_ELEMENT_NAME_SPEAKER_METADATA='<%=Constants.REPETITION_XML_ELEMENT_NAME_SPEAKER_METADATA %>';
    var XML_ELEMENT_NAME_REPETITON_TYPE='<%=Constants.REPETITION_XML_ELEMENT_NAME_REPETITON_TYPE %>';
    var XML_ELEMENT_NAME_MIN_DISTANCE = '<%= Constants.REPETITION_XML_ELEMENT_NAME_MIN_DISTANCE %>';
    var XML_ELEMENT_NAME_MAX_DISTANCE = '<%= Constants.REPETITION_XML_ELEMENT_NAME_MAX_DISTANCE %>';
    var XML_ELEMENT_NAME_IGNORED_CUSTOM_POS='<%= Constants.REPETITION_XML_ELEMENT_NAME_IGNORED_CUSTOM_POS %>';
    var XML_ELEMENT_NAME_SPEAKER_CHANGE='<%= Constants.REPETITION_XML_ELEMENT_NAME_SPEAKER_CHANGE %>';
    var XML_ELEMENT_NAME_POSITION_TO_MATCH='<%= Constants.REPETITION_XML_ELEMENT_NAME_POSITION_TO_MATCH %>';
    var XML_ELEMENT_NAME_POSITION_TO_OVERLAP='<%= Constants.REPETITION_XML_ELEMENT_NAME_POSITION_TO_OVERLAP %>';
    var XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_TYPE='<%= Constants.REPETITION_XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_TYPE %>';
    var XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MIN_DISTANCE='<%= Constants.REPETITION_XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MIN_DISTANCE %>';
    var XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MAX_DISTANCE='<%= Constants.REPETITION_XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MAX_DISTANCE %>';
    var XML_ELEMENT_NAME_CONTEXT_PRECEDEDBY='<%= Constants.REPETITION_XML_ELEMENT_NAME_CONTEXT_PRECEDEDBY %>';
    var XML_ELEMENT_NAME_CONTEXT_WITHIN_SPEAKER_CONTRIBUTION='<%= Constants.REPETITION_XML_ELEMENT_NAME_CONTEXT_WITHIN_SPEAKER_CONTRIBUTION %>';
    var XML_ELEMENT_NAME_REPETITON_SIMILARITY_TYPE = '<%= Constants.REPETITION_XML_ELEMENT_NAME_REPETITON_SIMILARITY_TYPE%>';
    var XML_ELEMENT_NAME_REPETITION_XML_ELEMENT_NAME_IGNORE_TOKEN_ORDER = '<%= Constants.REPETITION_XML_ELEMENT_NAME_IGNORE_TOKEN_ORDER%>';
    
    
    var regexDistance = /^(0?\d|1\d|20)$/;
    var regexPositionToSpeakerChange =/^(0?[0-5])$/;

    function getXMLForRepetitions(){
        var repetitions = [];
        repetitions.push(
            "<",XML_ELEMENT_NAME_REPETITIONS,">"
        );
        
        $('#repetition-search-form').find('.repetitionPropertiesForm').each(function(){
            //var annotationLayer = $(this).find('.annotationLayerSelect').val();
            var repetitionSearchMode = $(this).find('.repetitionSearchModeSelect').val();
            var annotationLayer;
            var similarityType;
            
            switch (repetitionSearchMode) {
                case "1":
                  annotationLayer = "<%=RepetitionTypeEnum.WORD%>";
                  similarityType = "<%=SimilarityTypeEnum.EQUAL%>";
                  break;
                case "2":
                   annotationLayer = "<%=RepetitionTypeEnum.NORM%>";
                   similarityType = "<%=SimilarityTypeEnum.EQUAL%>";
                  break;
                case "3":
                  annotationLayer = "<%=RepetitionTypeEnum.LEMMA%>";
                  similarityType = "<%=SimilarityTypeEnum.EQUAL%>";
                  break;
                case "4":
                  annotationLayer = "<%=RepetitionTypeEnum.WORD%>";
                  similarityType = "<%=SimilarityTypeEnum.DIFF_NORM%>";
                  break;
                case "5":
                  annotationLayer = "<%=RepetitionTypeEnum.NORM%>";
                  similarityType = "<%=SimilarityTypeEnum.DIFF_PRON%>";
                  break;
                case "6":
                  annotationLayer = "<%=RepetitionTypeEnum.LEMMA%>";
                  similarityType = "<%=SimilarityTypeEnum.DIFF_NORM%>";
                  break;
                case "7":
                  annotationLayer = "<%=RepetitionTypeEnum.LEMMA%>";
                  similarityType = "<%=SimilarityTypeEnum.FUZZY_PLUS %>";
                  break;
                case "8":
                  annotationLayer = "<%=RepetitionTypeEnum.LEMMA%>";
                  similarityType = "<%=SimilarityTypeEnum.OWN_LEMMA_LIST%>";    
                  break;
                case "9":
                  annotationLayer = "<%=RepetitionTypeEnum.LEMMA%>";
                  similarityType = "<%=SimilarityTypeEnum.FUZZY%>";
                  break;
                default:
                    alert("Search mode " + repetitionSearchMode + "is not supported!");
            }

            var speaker = $(this).find('.speakerSelect').val();
            var speakerMetadata = "";
            if(speaker==="false"){
                speakerMetadata = $(this).find('.speakerMetadataInputField').val()
                        .replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                
            }
            var minDistance = getDistance(this, '.minDistance', 0, regexDistance);
            var maxDistance = getDistance(this, '.maxDistance', 20, regexDistance);
            var speakerChange = $(this).find('.speakerChangeSelect').val();
            var positionToMatch = $(this).find('.positionToMatch').val();
            var positionToOverlap = $(this).find('.positionToOverlap').val();
            var ignoreTokenOrder = $(this).find('.ignoreTokenOrder').val();
            var positionToSpeakerChangeType = $(this).find('.positionToSpeakerChangeType').val();
            var positionToSpeakerChangeMin = 'null';
            var positionToSpeakerChangeMax = 'null';
            if(positionToSpeakerChangeType!=='null'){
                positionToSpeakerChangeMin = getDistance(this, '.positionToSpeakerChangeMin', 0, regexPositionToSpeakerChange);
                positionToSpeakerChangeMax = getDistance(this, '.positionToSpeakerChangeMax', 5, regexPositionToSpeakerChange);
            }

            var checkedPOSToBeIgnored = [];
            $(this).find("input[name='posToBeIgnored']:checked").each(function () {
                checkedPOSToBeIgnored.push($(this).val());
            });
            
            var ignoredCustomPOS = checkedPOSToBeIgnored.join('<%= Constants.REPETITION_XML_ELEMENT_NAME_IGNORED_CUSTOM_POS_SEPARATOR %>');   
            
            var contextPrecededBy = $(this).find('.repetitionKontextField').val();
            var contextWithinSpeakerContribution = false;
            if ($(this).find('.withinContributionCheckBox').is(':checked')) {contextWithinSpeakerContribution = true;}

            repetitions.push(
                "<",XML_ELEMENT_NAME_REPETITION,">",
                "<",XML_ELEMENT_NAME_REPETITON_TYPE,">",
                annotationLayer,
                "</",XML_ELEMENT_NAME_REPETITON_TYPE,">",
                "<",XML_ELEMENT_NAME_REPETITON_SIMILARITY_TYPE,">",
                similarityType,
                "</",XML_ELEMENT_NAME_REPETITON_SIMILARITY_TYPE,">",
                "<",XML_ELEMENT_NAME_SPEAKER,">",
                speaker,
                "</",XML_ELEMENT_NAME_SPEAKER,">",
                "<",XML_ELEMENT_NAME_SPEAKER_METADATA,">",
                speakerMetadata,
                "</",XML_ELEMENT_NAME_SPEAKER_METADATA,">",
                "<",XML_ELEMENT_NAME_MIN_DISTANCE,">",
                minDistance,
                "</",XML_ELEMENT_NAME_MIN_DISTANCE,">",
                "<",XML_ELEMENT_NAME_MAX_DISTANCE,">",
                maxDistance,
                "</",XML_ELEMENT_NAME_MAX_DISTANCE,">",
                "<",XML_ELEMENT_NAME_IGNORED_CUSTOM_POS,">",
                ignoredCustomPOS,
                "</",XML_ELEMENT_NAME_IGNORED_CUSTOM_POS,">",
                "<",XML_ELEMENT_NAME_SPEAKER_CHANGE,">",
                speakerChange,
                "</",XML_ELEMENT_NAME_SPEAKER_CHANGE,">",
                "<",XML_ELEMENT_NAME_POSITION_TO_MATCH,">",
                positionToMatch,
                "</",XML_ELEMENT_NAME_POSITION_TO_MATCH,">",
                "<",XML_ELEMENT_NAME_POSITION_TO_OVERLAP,">",
                positionToOverlap,
                "</",XML_ELEMENT_NAME_POSITION_TO_OVERLAP,">",
                 "<",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_TYPE,">",
                positionToSpeakerChangeType,
                "</",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_TYPE,">",
                 "<",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MIN_DISTANCE,">",
                positionToSpeakerChangeMin,
                "</",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MIN_DISTANCE,">",
                 "<",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MAX_DISTANCE,">",
                positionToSpeakerChangeMax,
                "</",XML_ELEMENT_NAME_POSITION_TO_SPEAKER_CHANGE_MAX_DISTANCE,">",
                 "<",XML_ELEMENT_NAME_CONTEXT_PRECEDEDBY,">",
                contextPrecededBy.replace(/</g, "&lt;").replace(/>/g, "&gt;"),
                "</",XML_ELEMENT_NAME_CONTEXT_PRECEDEDBY,">",
                 "<",XML_ELEMENT_NAME_CONTEXT_WITHIN_SPEAKER_CONTRIBUTION,">",
                contextWithinSpeakerContribution,
                "</",XML_ELEMENT_NAME_CONTEXT_WITHIN_SPEAKER_CONTRIBUTION,">",
                "<",XML_ELEMENT_NAME_REPETITION_XML_ELEMENT_NAME_IGNORE_TOKEN_ORDER,">",
                ignoreTokenOrder,
                "</",XML_ELEMENT_NAME_REPETITION_XML_ELEMENT_NAME_IGNORE_TOKEN_ORDER,">",
                "</",XML_ELEMENT_NAME_REPETITION,">"
            );
                        
        });
        
        repetitions.push(
            "</",XML_ELEMENT_NAME_REPETITIONS,">"
        );
                        
       // alert(repetitions.join(""));
        return repetitions.join("");
    }
    
    function getDistance(obj, selector, defaultValue, regex){
        
        // get value
        var n = $(obj).find(selector).val();

        //verify value
        if (n.match(regex)) {                        
            return n;
        }else{
            // use defaut values
            $(selector).val(defaultValue);
            return defaultValue;
        }
    }
    
</script>
